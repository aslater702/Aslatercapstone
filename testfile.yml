
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

#defines the jobs to run in this capstoen project
jobs:
  build:
    docker:
        # Use the same Docker base as the project
        - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
        - checkout
        # Download and cache dependencies
        - restore_cache:
            keys:
                - v1-dependencies-{{ checksum "requirements.txt" }}
                # fallback to using the latest cache if no exact match is found
                - v1-dependencies-
        - run:
            name: install dependencies
            command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
        - save_cache:
            paths:
                - ./venv
            key: v1-dependencies-{{ checksum "requirements.txt" }}
        # run lint test for docker file
        - run:
            name: run lint
            command: |
              . venv/bin/activate
              make lint

# create kubernetes cluster 
  create-a-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          The name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
#tests the cluster built by the orb
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          slatercapstone
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  run-upload-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: run and upload the docker container to docker hub repository
          no_output_timeout: 10m
          command: |
            ./run_docker.sh
      - run:
          name: upload docker container
          no_output_timeout: 10m
          command: |
            ./upload_docker.sh ${DOCKER_USERNAME} ${DOCKER_PASSWORD}

workflows:
  deployment:
    jobs:
      - build
      - create-a-cluster:
          cluster-name: slatercapstone
      - aws-eks/create-cluster:
          cluster-name: slatercapstone
          requires:
            -  create-a-cluster
      - test-cluster:
          cluster-name: slatercapstone
          requires:
            - aws-eks/create-cluster
      - run-upload-docker:
          requires:
            - build
      #- aws-eks/delete-cluster:
      #    cluster-name: slatercapstone
      #    requires:
      #      - test-cluster


# ECR Repo 
ecr-push:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            pip install awscli
      - run:
          name: push docker image to ECS
          command: |
            # retrieve authentication token
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 186622365412.dkr.ecr.us-east-1.amazonaws.com
            # push docker image to aslatercapstone repository in ECR
            docker push 186622365412.dkr.ecr.us-east-1.amazonaws.com/aslatercapstone:latest


arn:aws:iam::186622365412:user/AdminAES

apiVersion: v1
data:
  mapUsers: |
    - userarn: arn:aws:iam::186622365412:user/AdminAES
      username: AdminAES
      groups: 
        - system:masters
  mapRoles: |
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::186622365412:role/eksctl-slatercapstone-nodegroup-c-NodeInstanceRole-1NWG0138E77CJ
      username: system:node:{{EC2PrivateDNSName}}
kind: ConfigMap
metadata:
  creationTimestamp: "2021-12-08T19:26:32Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "1297"
  uid: 0e909a7c-502e-4506-b8e8-81eb5cb68a72